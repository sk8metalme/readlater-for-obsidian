#!/usr/bin/env node
/**
 * 集約保存機能のテストスクリプト
 * ネイティブメッセージングを使用して集約ファイルの読み書きをテスト
 */

const { spawn } = require('child_process');
const path = require('path');
const os = require('os');

// テスト用の記事データ
const testArticleData = {
    title: 'テスト記事タイトル',
    url: 'https://example.com/test-article',
    content: 'これはテスト記事の内容です。集約保存機能のテストに使用されます。',
    summary: 'テスト記事の要約です。集約保存機能が正常に動作することを確認します。',
    savedDate: new Date(),
    shortSummary: '集約保存テスト記事'
};

const testSettings = {
    obsidianPath: path.join(os.homedir(), 'Documents', 'Obsidian', 'ReadLater'),
    aggregatedSavingEnabled: true,
    aggregatedFileName: 'ReadLater_Articles.md',
    summaryEnabled: true
};

/**
 * ネイティブメッセージングでメッセージを送信
 */
function sendNativeMessage(message) {
    return new Promise((resolve, reject) => {
        const nativeHostPath = path.join(__dirname, '..', '..', 'native_host', 'claude_host.js');
        const child = spawn('node', [nativeHostPath], {
            stdio: ['pipe', 'pipe', 'pipe']
        });

        let stdout = '';
        let stderr = '';

        child.stdout.on('data', (data) => {
            stdout += data.toString();
        });

        child.stderr.on('data', (data) => {
            stderr += data.toString();
        });

        child.on('close', (code) => {
            if (code === 0) {
                try {
                    // 4バイトの長さプレフィックスをスキップしてJSONを解析
                    const jsonData = stdout.slice(4);
                    const result = JSON.parse(jsonData);
                    resolve(result);
                } catch (e) {
                    reject(new Error(`JSON解析エラー: ${e.message}\n出力: ${stdout}`));
                }
            } else {
                reject(new Error(`ネイティブホストが終了しました (コード: ${code})\nエラー: ${stderr}`));
            }
        });

        // メッセージを送信
        const jsonMessage = JSON.stringify(message);
        const buffer = Buffer.from(jsonMessage, 'utf8');
        const lengthBuffer = Buffer.alloc(4);
        lengthBuffer.writeUInt32LE(buffer.length, 0);
        
        child.stdin.write(lengthBuffer);
        child.stdin.write(buffer);
        child.stdin.end();
    });
}

/**
 * 集約ファイルの書き込みテスト
 */
async function testWriteFile() {
    console.log('📝 集約ファイル書き込みテスト開始...');
    
    try {
        const filePath = path.join(testSettings.obsidianPath, testSettings.aggregatedFileName);
        const content = `# ReadLater Articles

| タイトル | URL | 要約 | 日時 |
|---------|-----|------|------|
| ${testArticleData.title} | ${testArticleData.url} | ${testArticleData.shortSummary} | ${testArticleData.savedDate.toISOString().split('T')[0]} |

## 記事詳細

### ${testArticleData.title}

**元記事**: [${testArticleData.title}](${testArticleData.url})
**保存日**: ${testArticleData.savedDate.toISOString().split('T')[0]}

## 要約

${testArticleData.summary}

## 内容

${testArticleData.content}

---
*Generated by ReadLater for Obsidian*
`;

        const result = await sendNativeMessage({
            type: 'writeFile',
            filePath: filePath,
            content: content
        });

        if (result.ok) {
            console.log('✅ ファイル書き込み成功:', result.filePath);
            console.log(`   ファイルサイズ: ${result.bytes} bytes`);
            return result.filePath;
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('❌ ファイル書き込み失敗:', error.message);
        throw error;
    }
}

/**
 * 集約ファイルの読み込みテスト
 */
async function testReadFile(filePath) {
    console.log('📖 集約ファイル読み込みテスト開始...');
    
    try {
        const result = await sendNativeMessage({
            type: 'readFile',
            filePath: filePath
        });

        if (result.ok) {
            console.log('✅ ファイル読み込み成功:', result.filePath);
            console.log(`   ファイルサイズ: ${result.bytes} bytes`);
            console.log('   内容プレビュー:', result.content.substring(0, 200) + '...');
            return result.content;
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('❌ ファイル読み込み失敗:', error.message);
        throw error;
    }
}

/**
 * 集約ファイルの追加テスト
 */
async function testAppendToFile(filePath) {
    console.log('➕ 集約ファイル追加テスト開始...');
    
    try {
        // 既存ファイルを読み込み
        const existingContent = await testReadFile(filePath);
        
        // 新しい記事を追加
        const newArticle = {
            ...testArticleData,
            title: '追加テスト記事',
            url: 'https://example.com/added-article',
            content: 'これは追加されたテスト記事です。',
            summary: '追加記事の要約です。',
            savedDate: new Date()
        };
        
        const newTableRow = `| ${newArticle.title} | ${newArticle.url} | ${newArticle.shortSummary} | ${newArticle.savedDate.toISOString().split('T')[0]} |`;
        
        // テーブルに新しい行を追加
        const updatedContent = existingContent.replace(
            /(\| タイトル \|[\s\S]*?)(\n## 記事詳細)/,
            `$1\n${newTableRow}$2`
        );
        
        // 記事詳細セクションに追加
        const newArticleDetail = `

### ${newArticle.title}

**元記事**: [${newArticle.title}](${newArticle.url})
**保存日**: ${newArticle.savedDate.toISOString().split('T')[0]}

## 要約

${newArticle.summary}

## 内容

${newArticle.content}
`;
        
        const finalContent = updatedContent.replace(
            /(## 記事詳細[\s\S]*?)(\n---\n.*Generated by ReadLater|$)/,
            `$1${newArticleDetail}\n$2`
        );
        
        // 更新されたファイルを保存
        const result = await sendNativeMessage({
            type: 'writeFile',
            filePath: filePath,
            content: finalContent
        });

        if (result.ok) {
            console.log('✅ ファイル追加成功:', result.filePath);
            console.log(`   ファイルサイズ: ${result.bytes} bytes`);
            return result.filePath;
        } else {
            throw new Error(result.error);
        }
    } catch (error) {
        console.error('❌ ファイル追加失敗:', error.message);
        throw error;
    }
}

/**
 * メインテスト実行
 */
async function runTests() {
    console.log('🚀 集約保存機能テスト開始');
    console.log('================================');
    
    try {
        // 1. ファイル書き込みテスト
        const filePath = await testWriteFile();
        console.log('');
        
        // 2. ファイル読み込みテスト
        await testReadFile(filePath);
        console.log('');
        
        // 3. ファイル追加テスト
        await testAppendToFile(filePath);
        console.log('');
        
        console.log('🎉 すべてのテストが成功しました！');
        console.log('集約保存機能は正常に動作しています。');
        
    } catch (error) {
        console.error('💥 テストが失敗しました:', error.message);
        process.exit(1);
    }
}

// テスト実行
if (require.main === module) {
    runTests();
}

module.exports = {
    testWriteFile,
    testReadFile,
    testAppendToFile,
    runTests
};
